# SPDX-FileCopyrightText: 2024 Lukas Zirpel <thesis+lukas@zirpel.de>
# SPDX-License-Identifier: BSD-3-Clause
diff --git a/src/iperf.h b/src/iperf.h
index f297587..b51ee64 100644
--- a/src/iperf.h
+++ b/src/iperf.h
@@ -182,6 +182,8 @@ struct iperf_settings
 #endif // HAVE_SSL
     int	      connect_timeout;	    /* socket connection timeout, in ms */
     int       idle_timeout;         /* server idle time timeout */
+    unsigned int udp_connect_retries; /* Number of UDP connection retries */
+    unsigned int udp_connect_retry_timeout; /* UDP connection retries timeout in secs */
     unsigned int snd_timeout; /* Timeout for sending tcp messages in active mode, in us */
     struct iperf_time rcv_timeout;  /* Timeout for receiving messages in active mode, in us */
 };
@@ -461,10 +463,14 @@ extern int gerror; /* error value from getaddrinfo(3), for use in internal error
 #define UDP_CONNECT_MSG 0x39383736
 #define UDP_CONNECT_REPLY 0x36373839
 #define LEGACY_UDP_CONNECT_REPLY 0xb168de3a
+#define UDP_ALL_STREAMS_CONNECTED_MSG 0x35343332
+#define UDP_ALL_STREAMS_CONNECTED_REPLY 0x32333435
 #else
 #define UDP_CONNECT_MSG 0x36373839          // "6789" - legacy value was 123456789
 #define UDP_CONNECT_REPLY 0x39383736        // "9876" - legacy value was 987654321
 #define LEGACY_UDP_CONNECT_REPLY 987654321  // Old servers may still reply with the legacy value
+#define UDP_ALL_STREAMS_CONNECTED_MSG 0x32333435  // "2345"
+#define UDP_ALL_STREAMS_CONNECTED_REPLY 0x35343332  // "5432"
 #endif
 
 /* In Reverse mode, maximum number of packets to wait for "accept" response - to handle out of order packets */
diff --git a/src/iperf_api.c b/src/iperf_api.c
index daa157c..e47de9a 100644
--- a/src/iperf_api.c
+++ b/src/iperf_api.c
@@ -115,7 +115,7 @@ usage()
 void
 usage_long(FILE *f)
 {
-    fprintf(f, usage_longstr, DEFAULT_NO_MSG_RCVD_TIMEOUT, UDP_RATE / (1024*1024), DEFAULT_PACING_TIMER, DURATION, DEFAULT_TCP_BLKSIZE / 1024, DEFAULT_UDP_BLKSIZE);
+    fprintf(f, usage_longstr, DEFAULT_NO_MSG_RCVD_TIMEOUT, DEFAULT_UDP_CONNECT_RETRY_NUM, DEFAULT_UDP_CONNECT_RETRY_TIMEOUT, UDP_RATE / (1024*1024), DEFAULT_PACING_TIMER, DURATION, DEFAULT_TCP_BLKSIZE / 1024, DEFAULT_UDP_BLKSIZE);
 }
 
 
@@ -1082,6 +1082,7 @@ iperf_parse_arguments(struct iperf_test *test, int argc, char **argv)
         {"server", no_argument, NULL, 's'},
         {"client", required_argument, NULL, 'c'},
         {"udp", no_argument, NULL, 'u'},
+        {"udp-retry", optional_argument, NULL, OPT_UDP_RETRIES},
         {"bitrate", required_argument, NULL, 'b'},
         {"bandwidth", required_argument, NULL, 'b'},
 	{"server-bitrate-limit", required_argument, NULL, OPT_SERVER_BITRATE_LIMIT},
@@ -1166,6 +1167,7 @@ iperf_parse_arguments(struct iperf_test *test, int argc, char **argv)
     struct xbind_entry *xbe;
     double farg;
     int rcv_timeout_in = 0;
+    int udp_retries_timeout_specified = 0;
 
     blksize = 0;
     server_flag = client_flag = rate_flag = duration_flag = rcv_timeout_flag = snd_timeout_flag =0;
@@ -1267,6 +1269,36 @@ iperf_parse_arguments(struct iperf_test *test, int argc, char **argv)
                 set_protocol(test, Pudp);
 		client_flag = 1;
                 break;
+            case OPT_UDP_RETRIES:
+                set_protocol(test, Pudp); /* UDP connection retries implies UDP */
+                test->settings->udp_connect_retries = DEFAULT_UDP_CONNECT_RETRY_NUM;
+                test->settings->udp_connect_retry_timeout = DEFAULT_UDP_CONNECT_RETRY_TIMEOUT;
+                udp_retries_timeout_specified = 0;
+                if (optarg) {
+                    slash = strchr(optarg, '/');
+                    if (slash) {
+                        *slash = '\0';
+                        ++slash;
+                        if (strlen(optarg) > 0) { /* if retries timeout was specified */
+                            udp_retries_timeout_specified = 1;
+                            test->settings->udp_connect_retry_timeout = atof(slash);
+                            if (test->settings->udp_connect_retry_timeout < 1 || test->settings->udp_connect_retries > MAX_TIME) {
+                                i_errno = IEUDPCONNECT;
+                                return -1;
+                            }
+                        }
+                    }
+                    if (strlen(optarg) > 0) { /* if retries number was specified */
+                        test->settings->udp_connect_retries = atof(optarg);
+                        if (test->settings->udp_connect_retries < 1 ||
+                            (udp_retries_timeout_specified && test->settings->udp_connect_retries == 1)) {
+                            i_errno = IEUDPCONNECT;
+                            return -1;
+                        }
+                    }
+                }
+		client_flag = 1;
+                break;
             case OPT_SCTP:
 #if defined(HAVE_SCTP_H)
                 set_protocol(test, Psctp);
@@ -2256,6 +2288,8 @@ send_parameters(struct iperf_test *test)
 	    cJSON_AddNumberToObject(j, "repeating_payload", test->repeating_payload);
 	if (test->zerocopy)
 	    cJSON_AddNumberToObject(j, "zerocopy", test->zerocopy);
+        cJSON_AddNumberToObject(j, "udpconretry", test->settings->udp_connect_retries);
+        cJSON_AddNumberToObject(j, "udpconretry_timeout", test->settings->udp_connect_retry_timeout);
 #if defined(HAVE_DONT_FRAGMENT)
 	if (test->settings->dont_fragment)
 	    cJSON_AddNumberToObject(j, "dont_fragment", test->settings->dont_fragment);
@@ -2372,6 +2406,10 @@ get_parameters(struct iperf_test *test)
 	    test->repeating_payload = 1;
 	if ((j_p = cJSON_GetObjectItem(j, "zerocopy")) != NULL)
 	    test->zerocopy = j_p->valueint;
+	if ((j_p = cJSON_GetObjectItem(j, "udpconretry")) != NULL)
+	    test->settings->udp_connect_retries = j_p->valueint;
+	if ((j_p = cJSON_GetObjectItem(j, "udpconretry_timeout")) != NULL)
+	    test->settings->udp_connect_retry_timeout = j_p->valueint;
 #if defined(HAVE_DONT_FRAGMENT)
 	if ((j_p = cJSON_GetObjectItem(j, "dont_fragment")) != NULL)
 	    test->settings->dont_fragment = j_p->valueint;
@@ -2974,6 +3012,9 @@ iperf_defaults(struct iperf_test *testp)
     testp->settings->connect_timeout = -1;
     testp->settings->rcv_timeout.secs = DEFAULT_NO_MSG_RCVD_TIMEOUT / SEC_TO_mS;
     testp->settings->rcv_timeout.usecs = (DEFAULT_NO_MSG_RCVD_TIMEOUT % SEC_TO_mS) * mS_TO_US;
+    testp->settings->udp_connect_retries = 1;
+    testp->settings->udp_connect_retry_timeout = DEFAULT_UDP_CONNECT_RETRY_TIMEOUT;
+
     testp->zerocopy = 0;
 
     memset(testp->cookie, 0, COOKIE_SIZE);
@@ -3273,6 +3314,9 @@ iperf_reset_test(struct iperf_test *test)
     test->settings->dont_fragment = 0;
     test->zerocopy = 0;
 
+    test->settings->udp_connect_retries = 1;
+    test->settings->udp_connect_retry_timeout = DEFAULT_UDP_CONNECT_RETRY_TIMEOUT;
+
 #if defined(HAVE_SSL)
     if (test->settings->authtoken) {
         free(test->settings->authtoken);
diff --git a/src/iperf_api.h b/src/iperf_api.h
index 1313142..f100d32 100644
--- a/src/iperf_api.h
+++ b/src/iperf_api.h
@@ -65,9 +65,11 @@ typedef atomic_uint_fast64_t atomic_iperf_size_t;
 #define DEFAULT_UDP_BLKSIZE 1460 /* default is dynamically set, else this */
 #define DEFAULT_TCP_BLKSIZE (128 * 1024)  /* default read/write block size */
 #define DEFAULT_SCTP_BLKSIZE (64 * 1024)
-#define DEFAULT_PACING_TIMER 1000
-#define DEFAULT_NO_MSG_RCVD_TIMEOUT 120000
-#define MIN_NO_MSG_RCVD_TIMEOUT 100
+#define DEFAULT_PACING_TIMER 1000 /* [ms] */
+#define DEFAULT_NO_MSG_RCVD_TIMEOUT 120000 /* [ms] */
+#define MIN_NO_MSG_RCVD_TIMEOUT 100 /* [ms] */
+#define DEFAULT_UDP_CONNECT_RETRY_NUM 3
+#define DEFAULT_UDP_CONNECT_RETRY_TIMEOUT 10 /* [sec] */
 
 #define WARN_STR_LEN 128
 
@@ -101,6 +103,7 @@ typedef atomic_uint_fast64_t atomic_iperf_size_t;
 #define OPT_JSON_STREAM 28
 #define OPT_SND_TIMEOUT 29
 #define OPT_USE_PKCS1_PADDING 30
+#define OPT_UDP_RETRIES 31
 
 /* states */
 #define TEST_START 1
@@ -420,6 +423,7 @@ enum {
     IESNDTIMEOUT = 33,      // Illegal message send timeout
     IEUDPFILETRANSFER = 34, // Cannot transfer file using UDP
     IESERVERAUTHUSERS = 35,   // Cannot access authorized users file
+    IEUDPCONNECT = 36,      // illegal optional arguments for udp-retry option
     /* Test errors */
     IENEWTEST = 100,        // Unable to create a new test (check perror)
     IEINITTEST = 101,       // Test initialization failed (check perror)
@@ -485,6 +489,9 @@ enum {
     IESTREAMREAD = 206,     // Unable to read from stream (check perror)
     IESTREAMCLOSE = 207,    // Stream has closed unexpectedly
     IESTREAMID = 208,       // Stream has invalid ID
+    IESTREAMCNCTSEND = 209, // Failed to send stream connection mesage/reply (UDP)
+    IESTREAMCNCTED = 210,   // Server did not receive a response that all streams are connected (UDP)
+    IESTREAMCNCTEDREPLY = 211, // Client did not receive ack reply that the server received the response that all streams are connected (UDP)
     /* Timer errors */
     IENEWTIMER = 300,       // Unable to create new timer (check perror)
     IEUPDATETIMER = 301,    // Unable to update timer (check perror)
diff --git a/src/iperf_client_api.c b/src/iperf_client_api.c
index 7c22cad..0218a7c 100644
--- a/src/iperf_client_api.c
+++ b/src/iperf_client_api.c
@@ -39,6 +39,7 @@
 
 #include "iperf.h"
 #include "iperf_api.h"
+#include "iperf_udp.h"
 #include "iperf_util.h"
 #include "iperf_locale.h"
 #include "iperf_time.h"
@@ -325,6 +326,10 @@ iperf_handle_message_client(struct iperf_test *test)
             }
             else if (iperf_create_streams(test, test->mode) < 0)
                 return -1;
+            if (test->protocol->id == Pudp) {
+                if (iperf_udp_send_all_streams_connected_msgs(test) < 0)
+                    return -1;
+            }
             break;
         case TEST_START:
             if (iperf_init_test(test) < 0)
diff --git a/src/iperf_error.c b/src/iperf_error.c
index ce925a8..87a4809 100644
--- a/src/iperf_error.c
+++ b/src/iperf_error.c
@@ -377,6 +377,10 @@ iperf_strerror(int int_errno)
         case IEUDPFILETRANSFER:
             snprintf(errstr, len, "cannot transfer file using UDP");
             break;
+        case IEUDPCONNECT:
+            snprintf(errstr, len, "illegal optional arguments for udp-retry option");
+            perr = 1;
+            break;
         case IERVRSONLYRCVTIMEOUT:
             snprintf(errstr, len, "client receive timeout is valid only in receiving mode");
             perr = 1;
@@ -423,6 +427,15 @@ iperf_strerror(int int_errno)
         case IESTREAMID:
             snprintf(errstr, len, "stream has an invalid id");
             break;
+        case IESTREAMCNCTSEND:
+            snprintf(errstr, len, "failed to send stream connection mesage/reply");
+            break;
+        case IESTREAMCNCTED:
+            snprintf(errstr, len, "server did not receive a response that all streams are connected");
+            break;
+        case IESTREAMCNCTEDREPLY:
+            snprintf(errstr, len, "Client did not receive ack reply that the server received the response that all streams are connected");
+            break;
         case IENEWTIMER:
             snprintf(errstr, len, "unable to create new timer");
             perr = 1;
diff --git a/src/iperf_locale.c b/src/iperf_locale.c
index 9d94e02..329cc83 100644
--- a/src/iperf_locale.c
+++ b/src/iperf_locale.c
@@ -159,6 +159,9 @@ const char usage_longstr[] = "Usage: iperf3 [-s|-c host] [options]\n"
                            "  --nstreams      #         number of SCTP streams\n"
 #endif /* HAVE_SCTP_H */
                            "  -u, --udp                 use UDP rather than TCP\n"
+                           "  --udp-retry[=#[/#]]       send UDP connection retries (implies also using UDP)\n"
+                           "                            (1st optional: number of connection retries (default %d))\n"
+                           "                            (2nd optional: timeout [sec] to receive connection msg (default %d))\n"
                            "  --connect-timeout #       timeout for control connection setup (ms)\n"
                            "  -b, --bitrate #[KMG][/#]  target bitrate in bits/sec (0 for unlimited)\n"
                            "                            (default %d Mbit/sec for UDP, unlimited for TCP)\n"
diff --git a/src/iperf_server_api.c b/src/iperf_server_api.c
index b87734f..7172f4a 100644
--- a/src/iperf_server_api.c
+++ b/src/iperf_server_api.c
@@ -521,6 +521,8 @@ iperf_run_server(struct iperf_test *test)
     int64_t t_usecs;
     int64_t timeout_us;
     int64_t rcv_timeout_us;
+    struct sockaddr_storage sa_peer;
+    socklen_t sa_peer_len;
 
     if (test->logfile) {
         if (iperf_open_logfile(test) < 0)
@@ -697,6 +699,8 @@ iperf_run_server(struct iperf_test *test)
             }
 
             if (test->state == CREATE_STREAMS) {
+                iperf_udp_discard_old_connect_messages(test, &read_set, 1); /* discard old connect requests but reply to them */
+
                 if (FD_ISSET(test->prot_listener, &read_set)) {
 
                     if ((s = test->protocol->accept(test)) < 0) {
@@ -811,12 +815,39 @@ iperf_run_server(struct iperf_test *test)
 
                             flag = -1;
                         }
-                    }
+                    } /* if !is_closed(s) */
                     FD_CLR(test->prot_listener, &read_set);
-                }
+                } /* input received in prot_listener */
 
 
+                /* check if all streams connections accepted */
                 if (rec_streams_accepted == streams_to_rec && send_streams_accepted == streams_to_send) {
+                    /* receive client's ACK that last connection ack was received */
+                    if (test->protocol->id == Pudp) {
+                        if (iperf_udp_acceppt_all_streams_connected_msgs(test, UDP_ALL_STREAMS_CONNECTED_MSG , test->prot_listener, &sa_peer, &sa_peer_len) == 0) {
+                            cleanup_server(test);
+                            i_errno = IESTREAMCNCTED;
+                            return -1;
+                        }
+
+                        /* send acks that all connected msg received -
+                           check status only for first message, as client may close socket before all messages are sent */
+                        if (test->settings->udp_connect_retries > 1) {
+                            if (test->debug_level >= DEBUG_LEVEL_INFO) {
+                                iperf_printf(test, "Sending %d replies to ack that all streams connected message was received (on Socket %d)\n", test->settings->udp_connect_retries, test->prot_listener);
+                            }
+                            /* bind the remote side of the socket to the client */
+                            if (iperf_udp_bind_to_accepted(test, test->prot_listener, &sa_peer, sa_peer_len) < 0) {
+                                return -1;
+                            }
+
+                            if (iperf_udp_send_connect_msg(test, test->prot_listener, UDP_ALL_STREAMS_CONNECTED_REPLY, 1) < 0) {
+                                cleanup_server(test);
+                                return -1;
+                            }
+                        }
+                    }
+
                     if (test->protocol->id != Ptcp) {
                         FD_CLR(test->prot_listener, &test->read_set);
                         close(test->prot_listener);
@@ -912,7 +943,7 @@ iperf_run_server(struct iperf_test *test)
 	    iperf_time_now(&now);
 	    tmr_run(&now);
 	}
-    }
+    } /* while not IPERF_DONE */
 
 
     if (test->json_output) {
diff --git a/src/iperf_udp.c b/src/iperf_udp.c
index 760116b..7625802 100644
--- a/src/iperf_udp.c
+++ b/src/iperf_udp.c
@@ -153,7 +153,9 @@ iperf_udp_recv(struct iperf_stream *sp)
 
 	    /* Log the out-of-order packet */
 	    if (sp->test->debug)
+
 		fprintf(stderr, "OUT OF ORDER - incoming packet sequence %" PRIu64 " but expected sequence %" PRIu64 " on stream %d", pcount, sp->packet_count + 1, sp->socket);
+
 	}
 
 	/*
@@ -184,7 +186,7 @@ iperf_udp_recv(struct iperf_stream *sp)
     }
     else {
 	if (sp->test->debug)
-	    printf("Late receive, state = %d\n", sp->test->state);
+	    iperf_printf(sp->test, "Late receive, state = %d\n", sp->test->state);
     }
 
     return r;
@@ -360,63 +362,45 @@ iperf_udp_buffercheck(struct iperf_test *test, int s)
     return rc;
 }
 
+
+
 /*
- * iperf_udp_accept
+ * iperf_udp_bind_to_accepted
  *
- * Accepts a new UDP "connection"
+ * Bind tockt to address from accepted message
  */
 int
-iperf_udp_accept(struct iperf_test *test)
+iperf_udp_bind_to_accepted(struct iperf_test *test, int s, struct sockaddr_storage *sa_peer, socklen_t sa_peer_len)
 {
-    struct sockaddr_storage sa_peer;
-    unsigned int buf;
-    socklen_t len;
-    int       sz, s;
-    int	      rc;
-
-    /*
-     * Get the current outstanding socket.  This socket will be used to handle
-     * data transfers and a new "listening" socket will be created.
-     */
-    s = test->prot_listener;
 
-    /*
-     * Grab the UDP packet sent by the client.  From that we can extract the
-     * client's address, and then use that information to bind the remote side
-     * of the socket to the client.
-     */
-    len = sizeof(sa_peer);
-    if ((sz = recvfrom(test->prot_listener, &buf, sizeof(buf), 0, (struct sockaddr *) &sa_peer, &len)) < 0) {
-        i_errno = IESTREAMACCEPT;
-        return -1;
+    if (test->debug_level >= DEBUG_LEVEL_INFO) {
+        iperf_printf(test, "Binding socket %d to remote address in a received packet.\n", s);
     }
 
-    if (connect(s, (struct sockaddr *) &sa_peer, len) < 0) {
+    /* Use the address from the received packet to bind the remote side of the socket. */
+    if (connect(s, (struct sockaddr *) sa_peer, sa_peer_len) < 0) {
         i_errno = IESTREAMACCEPT;
         return -1;
     }
 
     /* Check and set socket buffer sizes */
-    rc = iperf_udp_buffercheck(test, s);
-    if (rc < 0)
-	/* error */
-	return rc;
+    if (iperf_udp_buffercheck(test, s) < 0) {
+	return -1;
+    }
+
     /*
      * If the socket buffer was too small, but it was the default
      * size, then try explicitly setting it to something larger.
      */
-    if (rc > 0) {
-	if (test->settings->socket_bufsize == 0) {
-            char str[WARN_STR_LEN];
-	    int bufsize = test->settings->blksize + UDP_BUFFER_EXTRA;
-	    snprintf(str, sizeof(str), "Increasing socket buffer size to %d",
-	             bufsize);
-	    warning(str);
-	    test->settings->socket_bufsize = bufsize;
-	    rc = iperf_udp_buffercheck(test, s);
-	    if (rc < 0)
-		return rc;
-	}
+    if (test->settings->socket_bufsize == 0) {
+        char str[WARN_STR_LEN];
+        int bufsize = test->settings->blksize + UDP_BUFFER_EXTRA;
+        snprintf(str, sizeof(str), "Increasing socket buffer size to %d", bufsize);
+        warning(str);
+        test->settings->socket_bufsize = bufsize;
+        if (iperf_udp_buffercheck(test, s) < 0) {
+            return -1;
+        }
     }
 
 #if defined(HAVE_SO_MAX_PACING_RATE)
@@ -443,6 +427,49 @@ iperf_udp_accept(struct iperf_test *test)
 	}
     }
 
+    return 0;
+} /* iperf_udp_bind_to_accepted */
+
+
+/*
+ * iperf_udp_accept
+ *
+ * Accepts a new UDP "connection"
+ */
+int
+iperf_udp_accept(struct iperf_test *test)
+{
+    struct sockaddr_storage sa_peer;
+    unsigned int buf;
+    socklen_t len;
+    int       sz, s;
+
+    /*
+     * Get the current outstanding socket.  This socket will be used to handle
+     * data transfers and a new "listening" socket will be created.
+     */
+    s = test->prot_listener;
+
+    /*
+     * Grab the UDP packet sent by the client.  From that we can extract the
+     * client's address, and then use that information to bind the remote side
+     * of the socket to the client.
+     */
+    len = sizeof(sa_peer);
+    if ((sz = recvfrom(test->prot_listener, &buf, sizeof(buf), 0, (struct sockaddr *) &sa_peer, &len)) < 0) {
+        i_errno = IESTREAMACCEPT;
+        return -1;
+    }
+
+    if (test->debug) {
+        iperf_printf(test, "Accepted Connect message of size %d (of %ld) with msg_id=x%x\n", sz, sizeof(buf), buf);
+    }
+
+    /* bind the remote side of the socket to the client */
+    if (iperf_udp_bind_to_accepted(test, s, &sa_peer, len) < 0) {
+        return -1;
+    }
+
     /*
      * Create a new "listening" socket to replace the one we were using before.
      */
@@ -456,14 +483,155 @@ iperf_udp_accept(struct iperf_test *test)
     FD_SET(test->prot_listener, &test->read_set);
     test->max_fd = (test->max_fd < test->prot_listener) ? test->prot_listener : test->max_fd;
 
-    /* Let the client know we're ready "accept" another UDP "stream" */
-    buf = UDP_CONNECT_REPLY;
-    if (write(s, &buf, sizeof(buf)) < 0) {
-        i_errno = IESTREAMWRITE;
+    /* Let the client know we're ready to "accept" another UDP "stream" */
+    if (iperf_udp_send_connect_msg(test, s, UDP_CONNECT_REPLY, 0) < 0) {
         return -1;
     }
 
     return s;
+} /* iperf_udp_accept */
+
+
+
+
+/*
+ * iperf_udp_send_connect_msg
+ *
+ * Send UDP connect related messages with repeats
+ */
+int
+iperf_udp_send_connect_msg(struct iperf_test *test, int s, int msg_type, int repeat_flag)
+{
+    unsigned int buf;
+    int repeats_num;
+
+    repeats_num = (repeat_flag) ? test->settings->udp_connect_retries : 1;
+    if (test->debug_level >= DEBUG_LEVEL_INFO) {
+        iperf_printf(test, "Sending %d UDP connection messages of type=x%x to Socket %d\n", repeats_num, msg_type, s);
+    }
+
+    buf = msg_type;
+
+    /* Check only first `write` status, as socket may be closed by the receiver
+       after the first message was received. */
+    if (write(s, &buf, sizeof(buf)) < 0) {
+        i_errno = IESTREAMCNCTSEND;
+        return -1;
+    }
+    if (repeat_flag) {
+        while (--repeats_num > 0) {
+            if (write(s, &buf, sizeof(buf)) < 0) {
+                // do nothing on failure here
+            }
+        }
+    }
+
+    return 0;
+}
+
+
+/*
+ * iperf_udp_acceppt_all_streams_connected_msgs
+ *
+ * Accepts the "all UDP streams connected" msgs/replies.
+ * Return value: >0 sucess, 0 - no msg received.
+ *
+ * Until the all msgs are received, accept input from all streams to
+ * discard connection retries messages - making sure connect retries will not be read
+ * later as test data sent from the client.  Receive from `control_socket` only when no
+ * stream msgs are available (assuming the connection retries and the acks are received
+ * in sending order).
+ */
+unsigned int
+iperf_udp_acceppt_all_streams_connected_msgs(struct iperf_test *test, int msg_type, int control_socket, struct sockaddr_storage *out_sa_peer, socklen_t *out_sa_peer_len)
+{
+    struct sockaddr_storage sa_peer;
+    socklen_t sa_peer_len;
+    unsigned int all_connected_count;
+    int sz, result;
+    unsigned int buf;
+    struct timeval timeout;
+    fd_set read_set, init_read_set;
+    struct iperf_stream *sp;
+    int max_fd;
+    int reply_to_discarded_connect_msg;
+
+    /* this function is not applicable for the legacy UDP streams connect protocol */
+    if (test->settings->udp_connect_retries < 2) {
+        return 1; // functiona is NA so return success
+    }
+
+    if (test->debug_level >= DEBUG_LEVEL_INFO) {
+        iperf_printf(test, "Receiving all streams connected msgs/replies from socket %d\n", control_socket);
+    }
+
+    /* receive only from test streams and not from other sockets */
+    FD_ZERO(&init_read_set);
+    FD_SET(control_socket, &init_read_set);
+    max_fd = control_socket;
+    SLIST_FOREACH(sp, &test->streams, streams) {
+        /* `control_socket` may or may not in the streams list, so don't add it again */
+        if (sp->socket != control_socket) {
+            FD_SET(sp->socket, &init_read_set);
+            if (sp->socket > max_fd)
+                max_fd = sp->socket;
+        }
+    }
+
+    /* Loop until receiving all streams connected msgs or until receive times out */
+    all_connected_count = 0;
+    do {
+        do {
+            memcpy(&read_set, &init_read_set, sizeof(fd_set));
+            timeout.tv_sec = test->settings->udp_connect_retry_timeout;
+            timeout.tv_usec = 0;
+            result = select(max_fd + 1, &read_set, NULL, NULL, &timeout);
+        } while (result < 0 && errno == EINTR);
+
+        if (result < 0) {
+            i_errno = IESELECT;
+            return -1;
+        }
+        /* if recive timed out assume no more acks from the client */
+        if (result == 0) {
+            if (test->debug) {
+                iperf_printf(test, "Receiving all streams connected msg timed out\n");
+            }
+            break; /* from waiting to all connected loop */
+        }
+
+        /* discard old connect replies */
+        reply_to_discarded_connect_msg = (out_sa_peer == NULL) ? 0 : 1;
+        if (iperf_udp_discard_old_connect_messages(test, &read_set, reply_to_discarded_connect_msg) > 0) {
+            continue; /* try to make sure all other messages are discurded before handling all connected msgs */
+        }
+
+        if (FD_ISSET(control_socket, &read_set)) { /* desired reply is available */
+            sa_peer_len = sizeof(sa_peer);
+            if ((sz = recvfrom(control_socket, &buf, sizeof(buf), 0, (struct sockaddr *) &sa_peer, &sa_peer_len)) < 0) {
+                i_errno = IESTREAMACCEPT;
+                return -1;
+            }
+
+            /* Ensure this is all connections available ack */
+            if (buf == msg_type) {
+                all_connected_count++;
+                /* save mes information of first connect msg */
+                if (all_connected_count == 1 && out_sa_peer != NULL) {
+                    memcpy(out_sa_peer, &sa_peer, sa_peer_len);
+                    *out_sa_peer_len = sa_peer_len;
+                }
+            } else if (test->debug_level >= DEBUG_LEVEL_ERROR) {
+                iperf_printf(test, "Expected stream connected msg/reply of type x%x but received a message type x%x\n", msg_type, buf);
+            }
+        }
+    } while (all_connected_count < test->settings->udp_connect_retries);
+
+    if (test->debug) {
+        iperf_printf(test, "Received %d (out of %d) all streams connected msgs/replies\n", all_connected_count, test->settings->udp_connect_retries);
+    }
+
+    return all_connected_count;
 }
 
 
@@ -492,20 +660,18 @@ iperf_udp_listen(struct iperf_test *test)
 
 
 /*
- * iperf_udp_connect
+ * iperf_udp_create_socket
  *
- * "Connect" to a UDP stream listener.
+ * Create and bind local socket for UDP stream listener.
  */
 int
-iperf_udp_connect(struct iperf_test *test)
+iperf_udp_create_socket(struct iperf_test *test)
 {
-    int s, sz;
-    unsigned int buf;
+    int s;
 #ifdef SO_RCVTIMEO
     struct timeval tv;
 #endif
     int rc;
-    int i, max_len_wait_for_reply;
 
     /* Create and bind our local socket. */
     if ((s = netdial(test->settings->domain, Pudp, test->bind_address, test->bind_dev, test->bind_port, test->server_hostname, test->server_port, -1)) < 0) {
@@ -570,44 +736,205 @@ iperf_udp_connect(struct iperf_test *test)
     setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (struct timeval *)&tv, sizeof(struct timeval));
 #endif
 
-    /*
-     * Write a datagram to the UDP stream to let the server know we're here.
-     * The server learns our address by obtaining its peer's address.
-     */
-    buf = UDP_CONNECT_MSG;
-    if (test->debug) {
-        printf("Sending Connect message to Socket %d\n", s);
+    return s;
+}
+
+
+/*
+ * iperf_udp_discard_old_connect_messages
+ *
+ * Read left over connect requests or replies of  streams and throw them away.
+ */
+int
+iperf_udp_discard_old_connect_messages(struct iperf_test *test, fd_set *read_set, int send_connect_reply_flag) {
+    int s;
+    struct iperf_stream *sp;
+    unsigned int buf;
+    int discarded_count = 0;
+
+    if (test->protocol->id == Pudp &&  test->settings->udp_connect_retries > 1) {
+        SLIST_FOREACH(sp, &test->streams, streams) {
+            s = sp->socket;
+            if (FD_ISSET(s, read_set)) {
+                discarded_count++;
+                recv(s, &buf, sizeof(buf), 0);
+                if (test->debug_level >= DEBUG_LEVEL_INFO) {
+                    iperf_printf(test, "Discarded connect message from socket=%d - message_id=x%x,send_connect_reply_flag=%d\n", s, buf, send_connect_reply_flag);
+                }
+
+                /* Send reply to the repeated request as previous reply may not have been received */
+                if (send_connect_reply_flag && buf == UDP_CONNECT_MSG) {
+                    if (test->debug_level >= DEBUG_LEVEL_INFO) {
+                        iperf_printf(test, "Send reply to the discarded late arrived connect msg from socket=%d - message_id=x%x\n", s, buf);
+                    }
+
+                    if (iperf_udp_send_connect_msg(test, s, UDP_CONNECT_REPLY, 0) < 0) {
+                        return -1;
+                    }
+                }
+
+                FD_CLR(s, read_set);
+            }
+        }
     }
-    if (write(s, &buf, sizeof(buf)) < 0) {
-        // XXX: Should this be changed to IESTREAMCONNECT?
-        i_errno = IESTREAMWRITE;
-        return -1;
+
+    return discarded_count;
+}
+
+
+/*
+ * iperf_udp_connect
+ *
+ * "Connect" to a UDP stream listener.
+ */
+int
+iperf_udp_connect(struct iperf_test *test)
+{
+    int s, sz, total_sz, result, ret;
+    int i, max_len_wait_for_reply;
+    unsigned int buf;
+    fd_set read_set, init_read_set;
+    struct timeval timeout;
+    struct iperf_stream *sp;
+    int max_fd;
+
+    if ((s = iperf_udp_create_socket(test)) < 0) {
+        return s;
+    }
+
+    ret = -1; /* default return - failure */
+
+    if (test->settings->udp_connect_retries < 2) {
+        max_fd = 0;
+    } else {
+        /* receive only from test streams and not from other sockets */
+        FD_ZERO(&init_read_set);
+        FD_SET(s, &init_read_set);
+        max_fd = s;
+        SLIST_FOREACH(sp, &test->streams, streams) {
+            FD_SET(sp->socket, &init_read_set);
+            if (sp->socket > max_fd)
+                max_fd = sp->socket;
+        }
     }
 
     /*
-     * Wait until the server replies back to us with the "accept" response.
+     * Write a datagram to the UDP stream to let the server know we're here.
+     * The server learns our address by obtaining its peer's address.
      */
-    i = 0;
-    max_len_wait_for_reply = sizeof(buf);
-    if (test->reverse) /* In reverse mode allow few packets to have the "accept" response - to handle out of order packets */
-        max_len_wait_for_reply += MAX_REVERSE_OUT_OF_ORDER_PACKETS * test->settings->blksize;
-    do {
-        if ((sz = recv(s, &buf, sizeof(buf), 0)) < 0) {
+    for (i=0; i < test->settings->udp_connect_retries  && ret < 0; i++) {
+        if (test->debug_level >= DEBUG_LEVEL_INFO) {
+            iperf_printf(test, "Sending Connect message x%x to Socket %d - retry number %d\n", UDP_CONNECT_MSG, s, i);
+        }
+
+        iperf_udp_send_connect_msg(test, s, UDP_CONNECT_MSG, 0);
+
+        /*
+        * Wait until the server replies back to us with the "accept" response, or timeout.
+        */
+
+        /* this functionality is applicable only when the server handles retries */
+        if (test->settings->udp_connect_retries > 1) {
+            do { /* get reply for this connection request */
+                do {
+                    memcpy(&read_set, &init_read_set, sizeof(fd_set));
+                    timeout.tv_sec = test->settings->udp_connect_retry_timeout; /* Wait for server's ack with time out */
+                    timeout.tv_usec = 0;
+                    result = select(max_fd + 1, &read_set, NULL, NULL, &timeout);
+                } while (result < 0 && errno == EINTR);
+
+                if (result < 0) {
+                    i_errno = IESELECT;
+                    return -1;
+                } else if (result > 0) { /* some input received */
+                    iperf_udp_discard_old_connect_messages(test, &read_set, 0); /* discurd prev streams connect responses */
+                    if (FD_ISSET(s, &read_set)) { /* reply is available for the connection request */
+                        break; /* from waiting for this connect reply */
+                    }
+                } else { /* result == 0 - select timed out*/
+                    if (test->debug) {
+                        iperf_printf(test, "Receiving server's connection ack for socket %d timed out after connect retry %d, errno=%s\n", s, i + 1, strerror(errno));
+                    }
+                }
+            } while(result > 0);
+
+            if (result == 0) { /* on timed out select() - next connnect retry */
+                continue; /* connect retry for loop */
+            }
+        }
+
+        /* get the connect reply from the server */
+        total_sz = 0;
+        max_len_wait_for_reply = sizeof(buf);
+        if (test->reverse && test->settings->udp_connect_retries < 2) {
+            /* In reverse mode allow few packets to have the "accept" response - to handle out of order packets */
+            max_len_wait_for_reply += MAX_REVERSE_OUT_OF_ORDER_PACKETS * test->settings->blksize;
+        }
+
+        do {
+            if ((sz = recv(s, &buf, sizeof(buf), 0)) < 0) {
+                i_errno = IESTREAMREAD;
+                return -1;
+            }
+            if (test->debug) {
+                iperf_printf(test, "Connect reply received for Socket %d, sz=%d, msg_id=x%x, total_sz=%d, max_len_wait_for_reply=%d\n", s, sz, buf, total_sz, max_len_wait_for_reply);
+            }
+            total_sz += sz;
+        } while (buf != UDP_CONNECT_REPLY && buf != LEGACY_UDP_CONNECT_REPLY && total_sz < max_len_wait_for_reply);
+
+        /* Only receiving connect reply is allowed in this state */
+        if (buf != UDP_CONNECT_REPLY && buf != LEGACY_UDP_CONNECT_REPLY) {
             i_errno = IESTREAMREAD;
             return -1;
         }
-        if (test->debug) {
-            printf("Connect received for Socket %d, sz=%d, buf=%x, i=%d, max_len_wait_for_reply=%d\n", s, sz, buf, i, max_len_wait_for_reply);
-        }
-        i += sz;
-    } while (buf != UDP_CONNECT_REPLY && buf != LEGACY_UDP_CONNECT_REPLY && i < max_len_wait_for_reply);
 
-    if (buf != UDP_CONNECT_REPLY  && buf != LEGACY_UDP_CONNECT_REPLY) {
+        ret = s; // Connection is successful
+
+    } /* connect retry loop */
+
+    if (ret < 0) {
         i_errno = IESTREAMREAD;
-        return -1;
     }
 
-    return s;
+    return ret;
+}
+
+
+/* iperf_udp_send_all_streams_connected_msgs
+ *
+ * Send to the server that all streams connected and serevrs' replies accepted by the client
+ */
+int
+iperf_udp_send_all_streams_connected_msgs(struct iperf_test *test)
+{
+    int s;
+    unsigned int rc;
+
+    rc = 0;
+    if (test->settings->udp_connect_retries > 1) {
+        if ((s = iperf_udp_create_socket(test)) < 0) {
+            return s;
+        }
+
+        if (test->debug_level >= DEBUG_LEVEL_INFO) {
+            iperf_printf(test, "Sending all stream connected messages to socket %d\n", s);
+        }
+
+        /* send all streams connected message */
+        rc = iperf_udp_send_connect_msg(test, s, UDP_ALL_STREAMS_CONNECTED_MSG, 1);
+
+        /* receive all replies to the stream connected message */
+        if (rc == 0) {
+            if (iperf_udp_acceppt_all_streams_connected_msgs(test, UDP_ALL_STREAMS_CONNECTED_REPLY, s, NULL, NULL) == 0) {
+                i_errno = IESTREAMCNCTEDREPLY;
+                rc = -1;
+            }
+        }
+
+        close(s);
+    }
+
+    return rc;
 }
 
 
diff --git a/src/iperf_udp.h b/src/iperf_udp.h
index c6f15ab..378da4c 100644
--- a/src/iperf_udp.h
+++ b/src/iperf_udp.h
@@ -53,6 +53,13 @@ int iperf_udp_send(struct iperf_stream *) /* __attribute__((hot)) */;
  */
 int iperf_udp_accept(struct iperf_test *);
 
+/*
+ * iperf_udp_bind_to_accepted
+ *
+ * Bind tockt to address from accepted message
+ */
+int
+iperf_udp_bind_to_accepted(struct iperf_test *test, int s, struct sockaddr_storage *sa_peer, socklen_t sa_peer_len);
 
 int iperf_udp_listen(struct iperf_test *);
 
@@ -60,5 +67,12 @@ int iperf_udp_connect(struct iperf_test *);
 
 int iperf_udp_init(struct iperf_test *);
 
+int iperf_udp_send_all_streams_connected_msgs(struct iperf_test *test);
+
+int iperf_udp_send_connect_msg(struct iperf_test *test, int s, int msg_type, int repeat_flag);
+
+unsigned int iperf_udp_acceppt_all_streams_connected_msgs(struct iperf_test *test, int msg_type, int control_socket, struct sockaddr_storage *sa_peer, socklen_t *sa_peer_len);
+
+int iperf_udp_discard_old_connect_messages(struct iperf_test *test, fd_set *read_set, int send_connect_reply_flag);
 
 #endif
